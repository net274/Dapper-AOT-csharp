// Output code has 2 diagnostics from 'Samples\Sync\Parameters.input.cs':
// Samples\Sync\Parameters.input.cs(10,21): error CS8795: Partial method 'Test.ReturnViaReturn(DbConnection, int, ref string, out DateTime)' must have an implementation part because it has accessibility modifiers.
// Samples\Sync\Parameters.input.cs(13,22): error CS8795: Partial method 'Test.ReturnViaOut(DbConnection, int, ref string, out DateTime, out int)' must have an implementation part because it has accessibility modifiers.
// Output code has 3 diagnostics from 'Dapper.AOT\Dapper.CodeAnalysis.CommandGenerator\Parameters.output.cs':
// Dapper.AOT\Dapper.CodeAnalysis.CommandGenerator\Parameters.output.cs(17,21): error CS0161: 'Test.ReturnViaReturn(DbConnection, int, string, DateTime)': not all code paths return a value
// Dapper.AOT\Dapper.CodeAnalysis.CommandGenerator\Parameters.output.cs(17,21): error CS0759: No defining declaration found for implementing declaration of partial method 'Test.ReturnViaReturn(DbConnection, int, string, DateTime)'
// Dapper.AOT\Dapper.CodeAnalysis.CommandGenerator\Parameters.output.cs(101,22): error CS0759: No defining declaration found for implementing declaration of partial method 'Test.ReturnViaOut(DbConnection, int, string, DateTime, int)'

#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by:
//     Dapper.CodeAnalysis.CommandGenerator vN/A
// Changes to this file may cause incorrect behavior and
// will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#region Designer generated code
partial class Test
{

	private static global::System.Data.Common.DbCommand? s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaReturn_9;

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public partial int ReturnViaReturn(global::System.Data.Common.DbConnection connection, int id, string inputOutput, global::System.DateTime output)
	{
		// locals
		global::System.Data.Common.DbCommand? __dapper__command = null;
		bool __dapper__close = false;
		try
		{
			// prepare connection
			if (connection.State == global::System.Data.ConnectionState.Closed)
			{
				connection.Open();
				__dapper__close = true;
			}

			// prepare command (excluding parameter values)
			if ((__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaReturn_9, null)) is null)
			{
				__dapper__command = __dapper__CreateCommand(connection);
			}
			else
			{
				__dapper__command.Connection = connection;
			}

			// assign parameter values
#pragma warning disable CS0618
			__dapper__command.Parameters[0].Value = global::Dapper.Internal.InternalUtilities.AsValue(id);
			__dapper__command.Parameters[1].Value = global::Dapper.Internal.InternalUtilities.AsValue(inputOutput);
			__dapper__command.Parameters[2].Value = global::Dapper.Internal.InternalUtilities.AsValue(output);
#pragma warning restore CS0618

			// execute
			__dapper__command.ExecuteNonQuery();
		}
		finally
		{
			// cleanup
			if (__dapper__command is not null)
			{
				__dapper__command.Connection = default;
				__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaReturn_9, __dapper__command);
				__dapper__command?.Dispose();
			}
			if (__dapper__close) connection?.Close();
		}

		// command factory for ReturnViaReturn
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		static global::System.Data.Common.DbCommand __dapper__CreateCommand(global::System.Data.Common.DbConnection connection)
		{
			var command = connection.CreateCommand();
			if (command is global::Oracle.ManagedDataAccess.Client.OracleCommand typed0)
			{
				typed0.BindByName = true;
				typed0.InitialLONGFetchSize = -1;
			}
			command.CommandType = global::System.Data.CommandType.StoredProcedure;
			command.CommandText = @"sproc";
			var args = command.Parameters;

			var p = command.CreateParameter();
			p.ParameterName = @"id";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			p = command.CreateParameter();
			p.ParameterName = @"inputOutput";
			p.Direction = global::System.Data.ParameterDirection.Input;
			p.Size = -1;
			args.Add(p);

			p = command.CreateParameter();
			p.ParameterName = @"output";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			return command;
		}
	}


	private static global::System.Data.Common.DbCommand? s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaOut_12;

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public partial void ReturnViaOut(global::System.Data.Common.DbConnection connection, int id, string inputOutput, global::System.DateTime output, int count)
	{
		// locals
		global::System.Data.Common.DbCommand? __dapper__command = null;
		bool __dapper__close = false;
		try
		{
			// prepare connection
			if (connection.State == global::System.Data.ConnectionState.Closed)
			{
				connection.Open();
				__dapper__close = true;
			}

			// prepare command (excluding parameter values)
			if ((__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaOut_12, null)) is null)
			{
				__dapper__command = __dapper__CreateCommand(connection);
			}
			else
			{
				__dapper__command.Connection = connection;
			}

			// assign parameter values
#pragma warning disable CS0618
			__dapper__command.Parameters[0].Value = global::Dapper.Internal.InternalUtilities.AsValue(id);
			__dapper__command.Parameters[1].Value = global::Dapper.Internal.InternalUtilities.AsValue(inputOutput);
			__dapper__command.Parameters[2].Value = global::Dapper.Internal.InternalUtilities.AsValue(output);
			__dapper__command.Parameters[3].Value = global::Dapper.Internal.InternalUtilities.AsValue(count);
#pragma warning restore CS0618

			// execute
			__dapper__command.ExecuteNonQuery();
		}
		finally
		{
			// cleanup
			if (__dapper__command is not null)
			{
				__dapper__command.Connection = default;
				__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_ReturnViaOut_12, __dapper__command);
				__dapper__command?.Dispose();
			}
			if (__dapper__close) connection?.Close();
		}

		// command factory for ReturnViaOut
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		static global::System.Data.Common.DbCommand __dapper__CreateCommand(global::System.Data.Common.DbConnection connection)
		{
			var command = connection.CreateCommand();
			if (command is global::Oracle.ManagedDataAccess.Client.OracleCommand typed0)
			{
				typed0.BindByName = true;
				typed0.InitialLONGFetchSize = -1;
			}
			command.CommandType = global::System.Data.CommandType.StoredProcedure;
			command.CommandText = @"sproc";
			var args = command.Parameters;

			var p = command.CreateParameter();
			p.ParameterName = @"id";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			p = command.CreateParameter();
			p.ParameterName = @"inputOutput";
			p.Direction = global::System.Data.ParameterDirection.Input;
			p.Size = -1;
			args.Add(p);

			p = command.CreateParameter();
			p.ParameterName = @"output";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			p = command.CreateParameter();
			p.ParameterName = @"count";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			return command;
		}
	}


	private static global::System.Data.Common.DbCommand? s___dapper__command_Samples_Sync_Parameters_input_cs_FineControl_15;

	[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
	public partial void FineControl(global::System.Data.Common.DbConnection connection, decimal value)
	{
		// locals
		global::System.Data.Common.DbCommand? __dapper__command = null;
		bool __dapper__close = false;
		try
		{
			// prepare connection
			if (connection.State == global::System.Data.ConnectionState.Closed)
			{
				connection.Open();
				__dapper__close = true;
			}

			// prepare command (excluding parameter values)
			if ((__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_FineControl_15, null)) is null)
			{
				__dapper__command = __dapper__CreateCommand(connection);
			}
			else
			{
				__dapper__command.Connection = connection;
			}

			// assign parameter values
#pragma warning disable CS0618
			__dapper__command.Parameters[0].Value = global::Dapper.Internal.InternalUtilities.AsValue(value);
#pragma warning restore CS0618

			// execute
			__dapper__command.ExecuteNonQuery();
		}
		finally
		{
			// cleanup
			if (__dapper__command is not null)
			{
				__dapper__command.Connection = default;
				__dapper__command = global::System.Threading.Interlocked.Exchange(ref s___dapper__command_Samples_Sync_Parameters_input_cs_FineControl_15, __dapper__command);
				__dapper__command?.Dispose();
			}
			if (__dapper__close) connection?.Close();
		}

		// command factory for FineControl
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
		static global::System.Data.Common.DbCommand __dapper__CreateCommand(global::System.Data.Common.DbConnection connection)
		{
			var command = connection.CreateCommand();
			if (command is global::Oracle.ManagedDataAccess.Client.OracleCommand typed0)
			{
				typed0.BindByName = true;
				typed0.InitialLONGFetchSize = -1;
			}
			command.CommandType = global::System.Data.CommandType.StoredProcedure;
			command.CommandText = @"sproc";
			var args = command.Parameters;

			var p = command.CreateParameter();
			p.ParameterName = @"value";
			p.Direction = global::System.Data.ParameterDirection.Input;
			args.Add(p);

			return command;
		}
	}
}
#endregion
